{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useBreakpointValue = useBreakpointValue;\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _tools = require(\"../theme/tools\");\n\nvar _useTheme = require(\"./../hooks/useTheme\");\n\nfunction useBreakpointValue(values) {\n  var _useWindowDimensions;\n\n  var windowWidth = (_useWindowDimensions = (0, _reactNative.useWindowDimensions)()) == null ? void 0 : _useWindowDimensions.width;\n  var theme = (0, _useTheme.useTheme)();\n\n  if ((0, _tools.hasValidBreakpointFormat)(values, theme.breakpoints)) {\n    var currentBreakpoint = (0, _tools.getClosestBreakpoint)(theme.breakpoints, windowWidth);\n    return (0, _tools.findLastValidBreakpoint)(values, theme.breakpoints, currentBreakpoint);\n  } else {\n    return values;\n  }\n}","map":{"version":3,"sources":["useBreakpointValue.ts"],"names":["windowWidth","theme","currentBreakpoint"],"mappings":";;;6BAAA,kB;;;;AACA,IAAA,MAAA,GAAA,OAAA,kBAAA;;AAKA,IAAA,SAAA,GAAA,OAAA,uBAAA;;AAEO,SAAA,kBAAA,CAAA,MAAA,EAEL;AAAA,MAAA,oBAAA;;AACA,MAAIA,WAAW,GAAA,CAAA,oBAAA,GAAG,CAAA,GAAA,YAAA,CAAH,mBAAG,GAAH,KAAA,IAAA,GAAA,KAAA,CAAA,GAAG,oBAAA,CAAlB,KAAA;AACA,MAAMC,KAAK,GAAG,CAAA,GAAA,SAAA,CAAd,QAAc,GAAd;;AAEA,MAAI,CAAA,GAAA,MAAA,CAAA,wBAAA,EAAA,MAAA,EAAiCA,KAAK,CAA1C,WAAI,CAAJ,EAAyD;AACvD,QAAIC,iBAAiB,GAAG,CAAA,GAAA,MAAA,CAAA,oBAAA,EACtBD,KAAK,CADiB,WAAA,EAAxB,WAAwB,CAAxB;AAIA,WAAO,CAAA,GAAA,MAAA,CAAA,uBAAA,EAAA,MAAA,EAELA,KAAK,CAFA,WAAA,EAAP,iBAAO,CAAP;AALF,GAAA,MAUO;AACL,WAAA,MAAA;AAEH;AAAA","sourcesContent":["import { useWindowDimensions } from 'react-native';\nimport {\n  getClosestBreakpoint,\n  hasValidBreakpointFormat,\n  findLastValidBreakpoint,\n} from '../theme/tools';\nimport { useTheme } from './../hooks/useTheme';\n\nexport function useBreakpointValue(\n  values: Object | Array<string | number | Object>\n) {\n  let windowWidth = useWindowDimensions()?.width;\n  const theme = useTheme();\n\n  if (hasValidBreakpointFormat(values, theme.breakpoints)) {\n    let currentBreakpoint = getClosestBreakpoint(\n      theme.breakpoints,\n      windowWidth\n    );\n    return findLastValidBreakpoint(\n      values,\n      theme.breakpoints,\n      currentBreakpoint\n    );\n  } else {\n    return values;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}