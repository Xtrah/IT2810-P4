{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeBaseProvider = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _native = require(\"styled-components/native\");\n\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\n\nvar _utils = require(\"@react-native-aria/utils\");\n\nvar _theme = require(\"./../theme\");\n\nvar _HybridProvider = _interopRequireDefault(require(\"./hybrid-overlay/HybridProvider\"));\n\nvar _overlays = require(\"@react-native-aria/overlays\");\n\nvar _Toast = require(\"../components/composites/Toast\");\n\nvar _NativeBaseContext = require(\"./NativeBaseContext\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _utils2 = require(\"../theme/tools/utils\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/core/NativeBaseProvider.tsx\";\n\nvar defaultInitialWindowMetricsBasedOnPlatform = _reactNative.Platform.select({\n  web: {\n    frame: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    },\n    insets: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    }\n  },\n  default: _reactNativeSafeAreaContext.initialWindowMetrics\n});\n\nvar NativeBaseProvider = function NativeBaseProvider(props) {\n  var _config$theme, _useWindowDimensions;\n\n  var colorModeManager = props.colorModeManager,\n      _props$config = props.config,\n      config = _props$config === void 0 ? _NativeBaseContext.defaultConfig : _props$config,\n      children = props.children,\n      _props$theme = props.theme,\n      propsTheme = _props$theme === void 0 ? _theme.theme : _props$theme,\n      initialWindowMetrics = props.initialWindowMetrics,\n      isSSR = props.isSSR;\n  var theme = (_config$theme = config.theme) != null ? _config$theme : propsTheme;\n\n  var newTheme = _react.default.useMemo(function () {\n    if (config.enableRem) {\n      return (0, _utils2.platformSpecificSpaceUnits)(theme);\n    }\n\n    return theme;\n  }, [config.enableRem, theme]);\n\n  var windowWidth = (_useWindowDimensions = (0, _reactNative.useWindowDimensions)()) == null ? void 0 : _useWindowDimensions.width;\n\n  var currentBreakpoint = _react.default.useMemo(function () {\n    return (0, _utils2.getClosestBreakpoint)(newTheme.breakpoints, windowWidth);\n  }, [windowWidth, newTheme.breakpoints]);\n\n  return _react.default.createElement(_native.ThemeProvider, {\n    theme: newTheme,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_NativeBaseContext.NativeBaseConfigProvider, {\n    config: config,\n    currentBreakpoint: currentBreakpoint,\n    isSSR: isSSR,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNativeSafeAreaContext.SafeAreaProvider, {\n    initialMetrics: initialWindowMetrics != null ? initialWindowMetrics : defaultInitialWindowMetricsBasedOnPlatform,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_HybridProvider.default, {\n    colorModeManager: colorModeManager,\n    options: theme.config,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, _react.default.createElement(_overlays.OverlayProvider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_Toast.ToastProvider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }, _react.default.createElement(InitializeToastRef, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }), _react.default.createElement(_utils.SSRProvider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, children)))))));\n};\n\nexports.NativeBaseProvider = NativeBaseProvider;\n\nvar InitializeToastRef = function InitializeToastRef() {\n  var toast = (0, _Toast.useToast)();\n  _Toast.ToastRef.current = toast;\n  return null;\n};","map":{"version":3,"sources":["NativeBaseProvider.tsx"],"names":["defaultInitialWindowMetricsBasedOnPlatform","Platform","web","frame","x","y","width","height","insets","top","left","right","bottom","default","defaultInitialWindowMetrics","NativeBaseProvider","colorModeManager","config","defaultConfig","children","propsTheme","defaultTheme","initialWindowMetrics","isSSR","props","theme","newTheme","React","windowWidth","currentBreakpoint","InitializeToastRef","toast","ToastRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ThemeProvider } from 'styled-components/native';\nimport {\n  SafeAreaProvider,\n  Metrics,\n  initialWindowMetrics as defaultInitialWindowMetrics,\n} from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme, ITheme } from './../theme';\nimport type { IColorModeProviderProps } from './color-mode';\nimport HybridProvider from './hybrid-overlay/HybridProvider';\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from '../components/composites/Toast';\nimport {\n  defaultConfig,\n  INativebaseConfig,\n  NativeBaseConfigProvider,\n} from './NativeBaseContext';\nimport { useToast } from '../components/composites/Toast';\nimport { Platform, useWindowDimensions } from 'react-native';\nimport {\n  getClosestBreakpoint,\n  platformSpecificSpaceUnits,\n} from '../theme/tools/utils';\n\n// For SSR to work, we need to pass initial insets as 0 values on web.\n\n// https://github.com/th3rdwave/react-native-safe-area-context/issues/132\nconst defaultInitialWindowMetricsBasedOnPlatform: Metrics | null = Platform.select(\n  {\n    web: {\n      frame: { x: 0, y: 0, width: 0, height: 0 },\n      insets: { top: 0, left: 0, right: 0, bottom: 0 },\n    },\n    default: defaultInitialWindowMetrics,\n  }\n);\n\nexport interface NativeBaseProviderProps {\n  theme?: ITheme;\n  colorModeManager?: IColorModeProviderProps['colorModeManager'];\n  children?: React.ReactNode;\n  initialWindowMetrics?: any;\n  config?: INativebaseConfig;\n  isSSR?: boolean;\n  // Refer https://github.com/th3rdwave/react-native-safe-area-context#testing\n}\n\nconst NativeBaseProvider = (props: NativeBaseProviderProps) => {\n  const {\n    colorModeManager,\n    config = defaultConfig,\n    children,\n    theme: propsTheme = defaultTheme,\n    initialWindowMetrics,\n    isSSR,\n  } = props;\n  const theme = config.theme ?? propsTheme;\n\n  const newTheme = React.useMemo(() => {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n    return theme;\n  }, [config.enableRem, theme]);\n\n  const windowWidth = useWindowDimensions()?.width;\n\n  const currentBreakpoint = React.useMemo(\n    () => getClosestBreakpoint(newTheme.breakpoints, windowWidth),\n    [windowWidth, newTheme.breakpoints]\n  );\n\n  return (\n    <ThemeProvider theme={newTheme}>\n      <NativeBaseConfigProvider\n        config={config}\n        currentBreakpoint={currentBreakpoint}\n        isSSR={isSSR}\n      >\n        <SafeAreaProvider\n          initialMetrics={\n            initialWindowMetrics ?? defaultInitialWindowMetricsBasedOnPlatform\n          }\n        >\n          <HybridProvider\n            colorModeManager={colorModeManager}\n            options={theme.config}\n          >\n            <OverlayProvider>\n              <ToastProvider>\n                <InitializeToastRef />\n                <SSRProvider>{children}</SSRProvider>\n              </ToastProvider>\n            </OverlayProvider>\n          </HybridProvider>\n        </SafeAreaProvider>\n      </NativeBaseConfigProvider>\n    </ThemeProvider>\n  );\n};\n\nconst InitializeToastRef = () => {\n  const toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\n\nexport { NativeBaseProvider };\n"]},"metadata":{},"sourceType":"script"}