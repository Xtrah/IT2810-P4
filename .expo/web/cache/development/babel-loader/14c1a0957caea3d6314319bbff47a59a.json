{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Hidden = Hidden;\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = require(\"react\");\n\nvar _useThemeProps = require(\"../../../hooks/useThemeProps\");\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _hooks2 = require(\"../../../core/color-mode/hooks\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nfunction Hidden(_ref) {\n  var children = _ref.children,\n      props = (0, _objectWithoutProperties2.default)(_ref, [\"children\"]);\n\n  var _usePropsResolution = (0, _useThemeProps.usePropsResolution)('Hidden', props, {\n    ignoreProps: ['only', 'platform']\n  }),\n      from = _usePropsResolution.from,\n      till = _usePropsResolution.till,\n      only = _usePropsResolution.only,\n      platform = _usePropsResolution.platform,\n      colorMode = _usePropsResolution.colorMode;\n\n  var _useTheme = (0, _hooks.useTheme)(),\n      breakpoints = _useTheme.breakpoints;\n\n  var currentColorMode = (0, _hooks2.useColorMode)();\n  var breakpointValueObject = Object.keys(breakpoints).reduce(function (obj, val) {\n    obj[val] = val;\n    return obj;\n  }, {});\n  var breakpointValue = (0, _hooks.useBreakpointValue)(breakpointValueObject);\n\n  var _useToken = (0, _hooks.useToken)('breakpoints', [breakpointValue]),\n      _useToken2 = (0, _slicedToArray2.default)(_useToken, 1),\n      currentBreakpointValue = _useToken2[0];\n\n  var _useToken3 = (0, _hooks.useToken)('breakpoints', [from]),\n      _useToken4 = (0, _slicedToArray2.default)(_useToken3, 1),\n      fromBreakPointValue = _useToken4[0];\n\n  var _useToken5 = (0, _hooks.useToken)('breakpoints', [till]),\n      _useToken6 = (0, _slicedToArray2.default)(_useToken5, 1),\n      tillBreakPointValue = _useToken6[0];\n\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  } else if (from && till && currentBreakpointValue >= fromBreakPointValue && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  } else if (from && !till && currentBreakpointValue >= fromBreakPointValue) {\n    return null;\n  } else if (till && !from && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  } else if (Array.isArray(only) && only.includes(breakpointValue) || only === breakpointValue) {\n    return null;\n  } else if (Array.isArray(platform) && platform.includes(_reactNative.Platform.OS) || platform === _reactNative.Platform.OS) {\n    return null;\n  } else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n\n  return children;\n}\n\nvar _default = (0, _react.memo)(Hidden);\n\nexports.default = _default;","map":{"version":3,"sources":["index.tsx"],"names":["children","props","from","till","only","platform","colorMode","ignoreProps","breakpoints","currentColorMode","breakpointValueObject","Object","obj","breakpointValue","currentBreakpointValue","fromBreakPointValue","tillBreakPointValue","Array","Platform"],"mappings":"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","sourcesContent":["import { memo } from 'react';\nimport type { IHiddenProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useBreakpointValue, useTheme, useToken } from '../../../hooks';\nimport { useColorMode } from '../../../core/color-mode/hooks';\nimport { Platform } from 'react-native';\n\nexport function Hidden({ children, ...props }: IHiddenProps) {\n  const { from, till, only, platform, colorMode } = usePropsResolution(\n    'Hidden',\n    props,\n    {\n      ignoreProps: ['only', 'platform'],\n    }\n  );\n  const { breakpoints } = useTheme();\n  const currentColorMode = useColorMode();\n\n  const breakpointValueObject = Object.keys(breakpoints).reduce(\n    (obj: any, val: string) => {\n      obj[val] = val;\n      return obj;\n    },\n    {}\n  );\n  const breakpointValue = useBreakpointValue(breakpointValueObject);\n  const [currentBreakpointValue] = useToken('breakpoints', [breakpointValue]);\n  const [fromBreakPointValue] = useToken('breakpoints', [from]);\n  const [tillBreakPointValue] = useToken('breakpoints', [till]);\n\n  //if no prop is passed, it will hide the element wrapped with hidden\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  }\n\n  //if from and till prop exists, it will hide the element wrapped accordingly\n  else if (\n    from &&\n    till &&\n    currentBreakpointValue >= fromBreakPointValue &&\n    currentBreakpointValue < tillBreakPointValue\n  ) {\n    return null;\n  }\n\n  //if from prop exists, it will hide the element wrapped starting from that breakpoint.\n  else if (from && !till && currentBreakpointValue >= fromBreakPointValue) {\n    return null;\n  }\n\n  //if till prop exists, it will hide the element wrapped starting from  0 till that breakpoint.\n  else if (till && !from && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  }\n\n  //if only prop exists and is array, check that array consists current breakpoint value, and if that exists, hide on that breakpoint to next breakpoint.\n  // if only prop is string, hide on that breakpoint to next breakpoint.\n  else if (\n    (Array.isArray(only) && only.includes(breakpointValue)) ||\n    only === breakpointValue\n  ) {\n    return null;\n  }\n  //if platform prop exists and is array, check that array consists current platform value, and if that exists, hide on that platform.\n  // if platform prop is string, hide on that platform.\n  else if (\n    (Array.isArray(platform) && platform.includes(Platform.OS)) ||\n    platform === Platform.OS\n  ) {\n    return null;\n  }\n  //if colormode prop is valid string, hide on that colormode.\n  else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n  return children;\n}\n\nexport default memo(Hidden);\nexport type { IHiddenProps };\n"]},"metadata":{},"sourceType":"script"}