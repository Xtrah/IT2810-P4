{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _Stack = require(\"../../primitives/Stack\");\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _nativeBase = require(\"native-base\");\n\nvar _usePropsResolution2 = require(\"../../../hooks/useThemeProps/usePropsResolution\");\n\nvar _Text = _interopRequireDefault(require(\"../../primitives/Text\"));\n\nvar _Icons = require(\"../../primitives/Icon/Icons\");\n\nvar _useHasResponsiveProps = require(\"../../../hooks/useHasResponsiveProps\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/Breadcrumb/Breadcrumb.tsx\";\n\nvar Breadcrumb = function Breadcrumb(_ref, ref) {\n  var style = _ref.style,\n      children = _ref.children,\n      separator = _ref.separator,\n      _text = _ref._text,\n      maxItems = _ref.maxItems,\n      _button = _ref._button,\n      isCollapsed = _ref.isCollapsed,\n      onCollapseChange = _ref.onCollapseChange,\n      props = (0, _objectWithoutProperties2.default)(_ref, [\"style\", \"children\", \"separator\", \"_text\", \"maxItems\", \"_button\", \"isCollapsed\", \"onCollapseChange\"]);\n  var textProps = (0, _extends2.default)({}, _text);\n\n  var _useControllableState = (0, _hooks.useControllableState)({\n    value: isCollapsed,\n    defaultValue: false,\n    onChange: function onChange(value) {\n      onCollapseChange && onCollapseChange(value);\n    }\n  }),\n      _useControllableState2 = (0, _slicedToArray2.default)(_useControllableState, 2),\n      collapsed = _useControllableState2[0],\n      setCollapsed = _useControllableState2[1];\n\n  var _usePropsResolution = (0, _usePropsResolution2.usePropsResolution)('Breadcrumb', props),\n      spacing = _usePropsResolution.spacing,\n      newProps = (0, _objectWithoutProperties2.default)(_usePropsResolution, [\"spacing\"]);\n\n  var separatorProps = {\n    accessibilityRole: _reactNative.Platform.OS === 'web' ? 'presentation' : undefined\n  };\n  var separatorElement = separator ? typeof separator === 'string' ? _react.default.createElement(_Text.default, (0, _extends2.default)({}, separatorProps, {\n    mx: spacing,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }), separator) : _react.default.cloneElement(separator, (0, _extends2.default)({\n    mx: spacing\n  }, separatorProps)) : _react.default.createElement(_Text.default, (0, _extends2.default)({\n    mx: spacing\n  }, separatorProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }), '/');\n\n  if ((0, _useHasResponsiveProps.useHasResponsiveProps)(props)) {\n    return null;\n  }\n\n  return _react.default.createElement(_Stack.HStack, (0, _extends2.default)({\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  }, newProps, {\n    ref: ref,\n    style: style,\n    divider: separatorElement,\n    space: spacing,\n    accessibilityRole: _reactNative.Platform.OS === 'web' ? 'navigation' : undefined,\n    accessibilityLabel: \"Breadcrumb\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }), children && !children.length ? children : getBreadcrumbSeparator(children, textProps, maxItems, _button, collapsed, setCollapsed));\n};\n\nvar getBreadcrumbSeparator = function getBreadcrumbSeparator(children, props, maxItems, _button, collapsed, setCollapsed) {\n  if (Array.isArray(children)) {\n    if (children.length === 1) {\n      return children;\n    }\n\n    var result = [];\n\n    if (maxItems) {\n      var buttonAdded = false;\n\n      if (typeof maxItems == 'number') {\n        if (children.length > 2 * maxItems) {\n          for (var i = 0; i < children.length; i++) {\n            if (i < maxItems || i >= children.length - maxItems) {\n              result.push(children[i]);\n            } else {\n              if (!buttonAdded) {\n                result.push(_react.default.createElement(CollapseButton, (0, _extends2.default)({}, _button, {\n                  setCollapsed: setCollapsed,\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 118,\n                    columnNumber: 19\n                  }\n                })));\n                buttonAdded = true;\n              }\n            }\n          }\n\n          buttonAdded = false;\n        }\n      } else if (typeof maxItems == 'object') {\n        if (children.length > maxItems[0] + maxItems[1]) for (var _i = 0; _i < children.length; _i++) {\n          if (_i < maxItems[0] || _i >= children.length - maxItems[1]) {\n            result.push(children[_i]);\n          } else {\n            if (!buttonAdded) {\n              result.push(_react.default.createElement(CollapseButton, (0, _extends2.default)({}, _button, {\n                setCollapsed: setCollapsed,\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 19\n                }\n              })));\n              buttonAdded = true;\n            }\n          }\n        }\n        buttonAdded = false;\n      }\n    } else {\n      result = children;\n    }\n\n    if (!collapsed) {\n      result = children;\n    }\n\n    return result.map(function (child, index) {\n      return _react.default.cloneElement(child, (0, _extends2.default)({\n        _text: (0, _extends2.default)({}, props)\n      }, props, {\n        key: \"breadcrumb-separator-\" + index\n      }));\n    });\n  } else {\n    return children;\n  }\n};\n\nvar CollapseButton = function CollapseButton(props) {\n  var remainingProps = (0, _extends2.default)({}, props);\n  return _react.default.createElement(_nativeBase.Pressable, (0, _extends2.default)({}, remainingProps, {\n    onPress: function onPress() {\n      props.setCollapsed(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 5\n    }\n  }), _react.default.createElement(_Icons.ThreeDotsIcon, {\n    size: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar _default = (0, _react.memo)((0, _react.forwardRef)(Breadcrumb));\n\nexports.default = _default;","map":{"version":3,"sources":["Breadcrumb.tsx"],"names":["Breadcrumb","style","children","separator","_text","maxItems","_button","isCollapsed","onCollapseChange","props","textProps","collapsed","setCollapsed","value","defaultValue","onChange","spacing","newProps","separatorProps","accessibilityRole","Platform","separatorElement","React","mx","getBreadcrumbSeparator","Array","result","buttonAdded","i","key","CollapseButton","remainingProps"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAEA,IAAA,MAAA,GAAA,OAAA,0BAAA;;AACA,IAAA,MAAA,GAAA,OAAA,kBAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,IAAA,oBAAA,GAAA,OAAA,mDAAA;;AACA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,yBAAA,CAAA;;AAEA,IAAA,MAAA,GAAA,OAAA,+BAAA;;AAEA,IAAA,sBAAA,GAAA,OAAA,wCAAA;;;;;AACA,IAAMA,UAAU,GAAVA,SAAAA,UAAAA,CAAa,IAAbA,EAAa,GAAbA,EAaD;AAXDC,MAAAA,KAWC,GAAA,IAAA,CAXDA,KAAAA;AAAAA,MACAC,QAUC,GAAA,IAAA,CAVDA,QADAD;AAAAA,MAEAE,SASC,GAAA,IAAA,CATDA,SAFAF;AAAAA,MAGAG,KAQC,GAAA,IAAA,CARDA,KAHAH;AAAAA,MAIAI,QAOC,GAAA,IAAA,CAPDA,QAJAJ;AAAAA,MAKAK,OAMC,GAAA,IAAA,CANDA,OALAL;AAAAA,MAMAM,WAKC,GAAA,IAAA,CALDA,WANAN;AAAAA,MAOAO,gBAIC,GAAA,IAAA,CAJDA,gBAPAP;AAAAA,MAQGQ,KAGF,GAAA,CAAA,GAAA,yBAAA,CAAA,OAAA,EAAA,IAAA,EAAA,CAAA,OAAA,EAAA,UAAA,EAAA,WAAA,EAAA,OAAA,EAAA,UAAA,EAAA,SAAA,EAAA,aAAA,EAAA,kBAAA,CAAA,CAXDR;AAYF,MAAMS,SAAS,GAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,EAAA,EAAf,KAAe,CAAf;;AADG,MAAA,qBAAA,GAI+B,CAAA,GAAA,MAAA,CAAA,oBAAA,EAAqB;AACrDG,IAAAA,KAAK,EADgD,WAAA;AAErDC,IAAAA,YAAY,EAFyC,KAAA;AAGrDC,IAAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,KAAA,EAAW;AACnBP,MAAAA,gBAAgB,IAAIA,gBAAgB,CAApCA,KAAoC,CAApCA;AARD;AAIoD,GAArB,CAJ/B;AAAA,MAAA,sBAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,qBAAA,EAAA,CAAA,CAAA;AAAA,MAIIG,SAJJ,GAAA,sBAAA,CAAA,CAAA,CAAA;AAAA,MAIeC,YAJf,GAAA,sBAAA,CAAA,CAAA,CAAA;;AAAA,MAAA,mBAAA,GAW8B,CAAA,GAAA,oBAAA,CAAA,kBAAA,EAAA,YAAA,EAX9B,KAW8B,CAX9B;AAAA,MAWKI,OAXL,GAAA,mBAAA,CAAA,OAAA;AAAA,MAWiBC,QAXjB,GAAA,CAAA,GAAA,yBAAA,CAAA,OAAA,EAAA,mBAAA,EAAA,CAAA,SAAA,CAAA,CAAA;;AAaH,MAAMC,cAAc,GAAG;AACrBC,IAAAA,iBAAiB,EAAGC,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAAAA,KAAAA,GAAAA,cAAAA,GADtB;AAAuB,GAAvB;AAKA,MAAMC,gBAAgB,GAAGlB,SAAS,GAChC,OAAA,SAAA,KAAA,QAAA,GACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,KAAA,CAAD,OAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,EAAA,EAAA,cAAA,EAAA;AAA0B,IAAA,EAAE,EAA5B,OAAA;AAAA,IAAA,MAAA,EAAA,KAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAAA;AAAA;AAAA,GAAA,CAAA,EADF,SACE,CADF,GAKEmB,MAAAA,CAAAA,OAAAA,CAAAA,YAAAA,CAAAA,SAAAA,EAAAA,CAAAA,GAAAA,SAAAA,CAAAA,OAAAA,EAAAA;AACEC,IAAAA,EAAE,EADJD;AAAAA,GAAAA,EAN8B,cAM9BA,CAAAA,CAN8B,GAYhC,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,KAAA,CAAD,OAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA;AAAM,IAAA,EAAE,EAAR;AAAA,GAAA,EAAA,cAAA,EAAA;AAAA,IAAA,MAAA,EAAA,KAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAAA;AAAA;AAAA,GAAA,CAAA,EAZF,GAYE,CAZF;;AAkBA,MAAI,CAAA,GAAA,sBAAA,CAAA,qBAAA,EAAJ,KAAI,CAAJ,EAAkC;AAChC,WAAA,IAAA;AAEF;;AAAA,SACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,MAAA,CAAD,MAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA;AACE,IAAA,OAAO,EADT,MAAA;AAEE,IAAA,QAAQ,EAFV;AAAA,GAAA,EAAA,QAAA,EAAA;AAIE,IAAA,GAAG,EAJL,GAAA;AAKE,IAAA,KAAK,EALP,KAAA;AAOE,IAAA,OAAO,EAPT,gBAAA;AAQE,IAAA,KAAK,EARP,OAAA;AAUE,IAAA,iBAAiB,EAAEF,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAAAA,KAAAA,GAAAA,YAAAA,GAVrB,SAAA;AAWE,IAAA,kBAAkB,EAXpB,YAAA;AAAA,IAAA,MAAA,EAAA,KAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAAA;AAAA;AAAA,GAAA,CAAA,EAaGlB,QAAQ,IAAI,CAACA,QAAQ,CAArBA,MAAAA,GAAAA,QAAAA,GAEGsB,sBAAsB,CAAA,QAAA,EAAA,SAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAhB9B,YAgB8B,CAf5B,CADF;AApDF,CAAA;;AAiFA,IAAMA,sBAAsB,GAAtBA,SAAAA,sBAAAA,CAAyB,QAAzBA,EAAyB,KAAzBA,EAAyB,QAAzBA,EAAyB,OAAzBA,EAAyB,SAAzBA,EAAyB,YAAzBA,EAOD;AACH,MAAIC,KAAK,CAALA,OAAAA,CAAJ,QAAIA,CAAJ,EAA6B;AAC3B,QAAIvB,QAAQ,CAARA,MAAAA,KAAJ,CAAA,EAA2B;AACzB,aAAA,QAAA;AAEF;;AAAA,QAAIwB,MAAW,GAAf,EAAA;;AACA,QAAA,QAAA,EAAc;AACZ,UAAIC,WAAW,GAAf,KAAA;;AACA,UAAI,OAAA,QAAA,IAAJ,QAAA,EAAiC;AAE/B,YAAIzB,QAAQ,CAARA,MAAAA,GAAkB,IAAtB,QAAA,EAAoC;AAClC,eAAK,IAAI0B,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAG1B,QAAQ,CAA5B,MAAA,EAAqC0B,CAArC,EAAA,EAA0C;AACxC,gBAAIA,CAAC,GAADA,QAAAA,IAAgBA,CAAC,IAAI1B,QAAQ,CAARA,MAAAA,GAAzB,QAAA,EAAqD;AACnDwB,cAAAA,MAAM,CAANA,IAAAA,CAAYxB,QAAQ,CAApBwB,CAAoB,CAApBA;AADF,aAAA,MAEO;AACL,kBAAI,CAAJ,WAAA,EAAkB;AAChBA,gBAAAA,MAAM,CAANA,IAAAA,CACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAA,cAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,EAAA,EAAA,OAAA,EAAA;AAA6B,kBAAA,YAAY,EAAzC,YAAA;AAAA,kBAAA,MAAA,EAAA,KAAA;AAAA,kBAAA,QAAA,EAAA;AAAA,oBAAA,QAAA,EAAA,YAAA;AAAA,oBAAA,UAAA,EAAA,GAAA;AAAA,oBAAA,YAAA,EADFA;AACE;AAAA,iBAAA,CAAA,CADFA;AAGAC,gBAAAA,WAAW,GAAXA,IAAAA;AAEH;AACF;AACDA;;AAAAA,UAAAA,WAAW,GAAXA,KAAAA;AAEH;AAjBD,OAAA,MAmBK,IAAI,OAAA,QAAA,IAAJ,QAAA,EAAiC;AACpC,YAAIzB,QAAQ,CAARA,MAAAA,GAAkBG,QAAQ,CAARA,CAAQ,CAARA,GAAcA,QAAQ,CAA5C,CAA4C,CAA5C,EACE,KAAK,IAAIuB,EAAC,GAAV,CAAA,EAAgBA,EAAC,GAAG1B,QAAQ,CAA5B,MAAA,EAAqC0B,EAArC,EAAA,EAA0C;AACxC,cAAIA,EAAC,GAAGvB,QAAQ,CAAZuB,CAAY,CAAZA,IAAmBA,EAAC,IAAI1B,QAAQ,CAARA,MAAAA,GAAkBG,QAAQ,CAAtD,CAAsD,CAAtD,EAA2D;AACzDqB,YAAAA,MAAM,CAANA,IAAAA,CAAYxB,QAAQ,CAApBwB,EAAoB,CAApBA;AADF,WAAA,MAEO;AACL,gBAAI,CAAJ,WAAA,EAAkB;AAEhBA,cAAAA,MAAM,CAANA,IAAAA,CACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAA,cAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,EAAA,EAAA,OAAA,EAAA;AAA6B,gBAAA,YAAY,EAAzC,YAAA;AAAA,gBAAA,MAAA,EAAA,KAAA;AAAA,gBAAA,QAAA,EAAA;AAAA,kBAAA,QAAA,EAAA,YAAA;AAAA,kBAAA,UAAA,EAAA,GAAA;AAAA,kBAAA,YAAA,EADFA;AACE;AAAA,eAAA,CAAA,CADFA;AAGAC,cAAAA,WAAW,GAAXA,IAAAA;AAEH;AACF;AACHA;AAAAA,QAAAA,WAAW,GAAXA,KAAAA;AAEH;AAtCD,KAAA,MAsCO;AACLD,MAAAA,MAAM,GAANA,QAAAA;AAEF;;AAAA,QAAI,CAAJ,SAAA,EAAgB;AACdA,MAAAA,MAAM,GAANA,QAAAA;AAEF;;AAAA,WAAOA,MAAM,CAANA,GAAAA,CAAW,UAAA,KAAA,EAAA,KAAA,EAA+B;AAC/C,aAAOJ,MAAAA,CAAAA,OAAAA,CAAAA,YAAAA,CAAAA,KAAAA,EAAAA,CAAAA,GAAAA,SAAAA,CAAAA,OAAAA,EAAAA;AACLlB,QAAAA,KAAK,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,EAAA,EADAkB,KACA;AADAA,OAAAA,EAAAA,KAAAA,EAAAA;AAGLO,QAAAA,GAAG,EAAA,0BAHL;AAAOP,OAAAA,CAAAA,CAAP;AADF,KAAOI,CAAP;AAjDF,GAAA,MAwDO;AACL,WAAA,QAAA;AAEH;AAnED,CAAA;;AAsEA,IAAMI,cAAc,GAAdA,SAAAA,cAAAA,CAAiB,KAAjBA,EAAiC;AAAA,MAC1BC,cAD0B,GAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,EAAA,EAAA,KAAA,CAAA;AAGrC,SACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,WAAA,CAAD,SAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,EAAA,EAAA,cAAA,EAAA;AAEE,IAAA,OAAO,EAAE,SAAA,OAAA,GAAM;AACbtB,MAAAA,KAAK,CAALA,YAAAA,CAAAA,KAAAA;AAHJ,KAAA;AAAA,IAAA,MAAA,EAAA,KAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,GAAA;AAAA,MAAA,YAAA,EAAA;AAAA;AAAA,GAAA,CAAA,EAME,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,MAAA,CAAD,aAAA,EAAA;AAAe,IAAA,IAAI,EAAnB,CAAA;AAAA,IAAA,MAAA,EAAA,KAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,GAAA;AAAA,MAAA,YAAA,EAPJ;AAOI;AAAA,GAAA,CANF,CADF;AAHF,CAAA;;eAee,CAAA,GAAA,MAAA,CAAA,IAAA,EAAK,CAAA,GAAA,MAAA,CAAA,UAAA,EAAL,UAAK,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { AccessibilityRole, Platform } from 'react-native';\nimport { HStack } from '../../primitives/Stack';\nimport { useControllableState } from '../../../hooks';\nimport { Pressable } from 'native-base';\nimport type { IBreadcrumbProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps/usePropsResolution';\nimport Text from '../../primitives/Text';\nimport type { IFlexProps } from '../../primitives';\nimport { ThreeDotsIcon } from '../../primitives/Icon/Icons';\n\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst Breadcrumb = (\n  {\n    style,\n    children,\n    separator,\n    _text,\n    maxItems,\n    _button,\n    isCollapsed,\n    onCollapseChange,\n    ...props\n  }: IBreadcrumbProps & IFlexProps,\n  ref: any\n) => {\n  const textProps = { ..._text };\n\n  // Maintaining state to show all children on press of collapse button\n  const [collapsed, setCollapsed] = useControllableState({\n    value: isCollapsed,\n    defaultValue: false,\n    onChange: (value) => {\n      onCollapseChange && onCollapseChange(value);\n    },\n  });\n  const { spacing, ...newProps } = usePropsResolution('Breadcrumb', props);\n\n  const separatorProps = {\n    accessibilityRole: (Platform.OS === 'web'\n      ? 'presentation'\n      : undefined) as AccessibilityRole,\n  };\n  const separatorElement = separator ? (\n    typeof separator === 'string' ? (\n      <Text {...separatorProps} mx={spacing}>\n        {separator}\n      </Text>\n    ) : (\n      React.cloneElement(separator, {\n        mx: spacing,\n        ...separatorProps,\n      })\n    )\n  ) : (\n    <Text mx={spacing} {...separatorProps}>\n      {'/'}\n    </Text>\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <HStack\n      display=\"flex\"\n      flexWrap=\"wrap\"\n      {...newProps}\n      ref={ref}\n      style={style}\n      // Custom Separator\n      divider={separatorElement}\n      space={spacing}\n      // @ts-ignore - Web only prop\n      accessibilityRole={Platform.OS === 'web' ? 'navigation' : undefined}\n      accessibilityLabel=\"Breadcrumb\"\n    >\n      {children && !children.length\n        ? children\n        : getBreadcrumbSeparator(\n            children,\n            textProps,\n            maxItems,\n            _button,\n            collapsed,\n            setCollapsed\n          )}\n    </HStack>\n  );\n};\n\n// Returns children to be rendered\nconst getBreadcrumbSeparator = (\n  children: JSX.Element[] | JSX.Element | any,\n  props: any,\n  maxItems: number | number[] | undefined,\n  _button: any,\n  collapsed: boolean | undefined,\n  setCollapsed: any\n) => {\n  if (Array.isArray(children)) {\n    if (children.length === 1) {\n      return children;\n    }\n    let result: any = [];\n    if (maxItems) {\n      let buttonAdded = false;\n      if (typeof maxItems == 'number') {\n        // When MaxItems is a number\n        if (children.length > 2 * maxItems) {\n          for (let i = 0; i < children.length; i++) {\n            if (i < maxItems || i >= children.length - maxItems) {\n              result.push(children[i]);\n            } else {\n              if (!buttonAdded) {\n                result.push(\n                  <CollapseButton {..._button} setCollapsed={setCollapsed} />\n                );\n                buttonAdded = true;\n              }\n            }\n          }\n          buttonAdded = false;\n        }\n      }\n      // Whem maxItems is an array\n      else if (typeof maxItems == 'object') {\n        if (children.length > maxItems[0] + maxItems[1])\n          for (let i = 0; i < children.length; i++) {\n            if (i < maxItems[0] || i >= children.length - maxItems[1]) {\n              result.push(children[i]);\n            } else {\n              if (!buttonAdded) {\n                // pushing Collapsible button as a child\n                result.push(\n                  <CollapseButton {..._button} setCollapsed={setCollapsed} />\n                );\n                buttonAdded = true;\n              }\n            }\n          }\n        buttonAdded = false;\n      }\n    } else {\n      result = children;\n    }\n    if (!collapsed) {\n      result = children;\n    }\n    return result.map((child: any, index: number) => {\n      return React.cloneElement(child, {\n        _text: { ...props },\n        ...props,\n        key: `breadcrumb-separator-${index}`,\n      });\n    });\n  } else {\n    return children;\n  }\n};\n\n// Collapse button\nconst CollapseButton = (props: any) => {\n  const { ...remainingProps } = props;\n\n  return (\n    <Pressable\n      {...remainingProps}\n      onPress={() => {\n        props.setCollapsed(false);\n      }}\n    >\n      <ThreeDotsIcon size={4} />\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(Breadcrumb));\nexport type { IBreadcrumbProps };\n"]},"metadata":{},"sourceType":"script"}