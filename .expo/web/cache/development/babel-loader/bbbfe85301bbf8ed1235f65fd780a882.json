{"ast":null,"code":"import { useId, useLabels, mergeProps, useSlotId } from \"@react-aria/utils\";\nexport function useLabel(props) {\n  var id = props.id,\n      label = props.label,\n      ariaLabelledby = props['aria-labelledby'],\n      ariaLabel = props['aria-label'],\n      _props$labelElementTy = props.labelElementType,\n      labelElementType = _props$labelElementTy === void 0 ? 'label' : _props$labelElementTy;\n  id = useId(id);\n  var labelId = useId();\n  var labelProps = {};\n\n  if (label) {\n    ariaLabelledby = ariaLabelledby ? ariaLabelledby + \" \" + labelId : labelId;\n    labelProps = {\n      id: labelId,\n      htmlFor: labelElementType === 'label' ? id : undefined\n    };\n  } else if (!ariaLabelledby && !ariaLabel) {\n    console.warn('If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility');\n  }\n\n  var fieldProps = useLabels({\n    id: id,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  });\n  return {\n    labelProps: labelProps,\n    fieldProps: fieldProps\n  };\n}\nexport function useField(props) {\n  var description = props.description,\n      errorMessage = props.errorMessage;\n\n  var _useLabel = useLabel(props),\n      labelProps = _useLabel.labelProps,\n      fieldProps = _useLabel.fieldProps;\n\n  var descriptionId = useSlotId();\n  var errorMessageId = useSlotId();\n  fieldProps = mergeProps(fieldProps, {\n    'aria-describedby': [descriptionId, errorMessageId, props['aria-describedby']].filter(Boolean).join(' ') || undefined\n  });\n  var descriptionProps = {};\n  var errorMessageProps = {};\n\n  if (description) {\n    descriptionProps.id = descriptionId;\n  }\n\n  if (errorMessage) {\n    errorMessageProps.id = errorMessageId;\n  }\n\n  return {\n    labelProps: labelProps,\n    fieldProps: fieldProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  };\n}","map":{"version":3,"sources":["packages/@react-aria/label/src/useLabel.ts","packages/@react-aria/label/src/useField.ts"],"names":["labelElementType","id","useId","labelId","labelProps","ariaLabelledby","htmlFor","undefined","console","fieldProps","useLabels","errorMessage","descriptionId","useSlotId","errorMessageId","mergeProps","props","descriptionProps","errorMessageProps"],"mappings":";OAoCO,SAAA,QAAA,CAAA,KAAA,EAAoD;AACzD,MAAI,EAAJ,GAAA,KAAA,CAAI,EAAJ;AAAA,MAAI,KAAJ,GAAA,KAAA,CAAI,KAAJ;AAAA,MAAI,cAAJ,GAAA,KAAA,CAGE,iBAHF;AAAA,MAAI,SAAJ,GAAA,KAAA,CAIE,YAJF;AAAA,8BAAA,KAAA,CAKEA,gBALF;AAAA,MAKEA,gBALF,sCAKqB,OALrB;AAQAC,EAAAA,EAAE,GAAGC,KAAK,CAAVD,EAAU,CAAVA;AACA,MAAIE,OAAO,GAAGD,KAAd,EAAA;AACA,MAAIE,UAAU,GAAd,EAAA;;AACA,MAAA,KAAA,EAAW;AACTC,IAAAA,cAAc,GAAGA,cAAc,GAAMA,cAAN,GAAA,GAAMA,GAAN,OAAA,GAA/BA,OAAAA;AACAD,IAAAA,UAAU,GAAG;AACXH,MAAAA,EAAE,EADS,OAAA;AAEXK,MAAAA,OAAO,EAAEN,gBAAgB,KAAhBA,OAAAA,GAAAA,EAAAA,GAAoCO;AAFlC,KAAbH;AAFF,GAAA,MAMO,IAAI,CAAA,cAAA,IAAmB,CAAvB,SAAA,EAAmC;AACxCI,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,sHAAAA;AACD;;AAED,MAAIC,UAAU,GAAGC,SAAS,CAAC;AACzBT,IAAAA,EADyB,EACzBA,EADyB;AAEzB,kBAFyB,SAAA;AAGzB,uBAAmBI;AAHM,GAAD,CAA1B;AAMA,SAAO;AACLD,IAAAA,UADK,EACLA,UADK;AAELK,IAAAA,UAAAA,EAAAA;AAFK,GAAP;AAID;OCrCM,SAAA,QAAA,CAAA,KAAA,EAAoD;AACzD,MAAI,WAAJ,GAAA,KAAA,CAAI,WAAJ;AAAA,MAAkBE,YAAlB,GAAA,KAAA,CAAkBA,YAAlB;;AACA,kBAA+B,QAAA,CAA/B,KAA+B,CAA/B;AAAA,MAAI,UAAJ,aAAI,UAAJ;AAAA,MAAiBF,UAAjB,aAAiBA,UAAjB;;AAEA,MAAIG,aAAa,GAAGC,SAApB,EAAA;AACA,MAAIC,cAAc,GAAGD,SAArB,EAAA;AAEAJ,EAAAA,UAAU,GAAGM,UAAU,CAAA,UAAA,EAAa;AAClC,wBAAoB,CAAA,aAAA,EAAA,cAAA,EAIlBC,KAAK,CAJa,kBAIb,CAJa,EAAA,MAAA,CAAA,OAAA,EAAA,IAAA,CAAA,GAAA,KAKWT;AANG,GAAb,CAAvBE;AASA,MAAIQ,gBAA6C,GAAjD,EAAA;AACA,MAAIC,iBAA8C,GAAlD,EAAA;;AACA,MAAA,WAAA,EAAiB;AACfD,IAAAA,gBAAgB,CAAhBA,EAAAA,GAAAA,aAAAA;AACD;;AACD,MAAA,YAAA,EAAkB;AAChBC,IAAAA,iBAAiB,CAAjBA,EAAAA,GAAAA,cAAAA;AACD;;AAED,SAAO;AACLd,IAAAA,UADK,EACLA,UADK;AAELK,IAAAA,UAFK,EAELA,UAFK;AAGLQ,IAAAA,gBAHK,EAGLA,gBAHK;AAILC,IAAAA,iBAAAA,EAAAA;AAJK,GAAP;AAMD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMProps, LabelableProps} from '@react-types/shared';\nimport {ElementType, LabelHTMLAttributes} from 'react';\nimport {useId, useLabels} from '@react-aria/utils';\n\nexport interface LabelAriaProps extends LabelableProps, DOMProps, AriaLabelingProps {\n  /**\n   * The HTML element used to render the label, e.g. 'label', or 'span'.\n   * @default 'label'\n   */\n  labelElementType?: ElementType\n}\n\nexport interface LabelAria {\n  /** Props to apply to the label container element. */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props to apply to the field container element being labeled. */\n  fieldProps: AriaLabelingProps & DOMProps\n}\n\n/**\n * Provides the accessibility implementation for labels and their associated elements.\n * Labels provide context for user inputs.\n * @param props - The props for labels and fields.\n */\nexport function useLabel(props: LabelAriaProps): LabelAria {\n  let {\n    id,\n    label,\n    'aria-labelledby': ariaLabelledby,\n    'aria-label': ariaLabel,\n    labelElementType = 'label'\n  } = props;\n\n  id = useId(id);\n  let labelId = useId();\n  let labelProps = {};\n  if (label) {\n    ariaLabelledby = ariaLabelledby ? `${ariaLabelledby} ${labelId}` : labelId;\n    labelProps = {\n      id: labelId,\n      htmlFor: labelElementType === 'label' ? id : undefined\n    };\n  } else if (!ariaLabelledby && !ariaLabel) {\n    console.warn('If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility');\n  }\n\n  let fieldProps = useLabels({\n    id,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  });\n\n  return {\n    labelProps,\n    fieldProps\n  };\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HelpTextProps} from '@react-types/shared';\nimport {HTMLAttributes} from 'react';\nimport {LabelAria, LabelAriaProps, useLabel} from './useLabel';\nimport {mergeProps, useSlotId} from '@react-aria/utils';\n\ninterface AriaFieldProps extends LabelAriaProps, HelpTextProps {}\n\nexport interface FieldAria extends LabelAria {\n  /** Props for the description element, if any. */\n  descriptionProps: HTMLAttributes<HTMLElement>,\n  /** Props for the error message element, if any. */\n  errorMessageProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the accessibility implementation for input fields.\n * Fields accept user input, gain context from their label, and may display a description or error message.\n * @param props - Props for the Field.\n */\nexport function useField(props: AriaFieldProps): FieldAria {\n  let {description, errorMessage} = props;\n  let {labelProps, fieldProps} = useLabel(props);\n\n  let descriptionId = useSlotId();\n  let errorMessageId = useSlotId();\n\n  fieldProps = mergeProps(fieldProps, {\n    'aria-describedby': [\n      descriptionId,\n      // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268\n      errorMessageId,\n      props['aria-describedby']\n    ].filter(Boolean).join(' ') || undefined\n  });\n\n  let descriptionProps: HTMLAttributes<HTMLElement> = {};\n  let errorMessageProps: HTMLAttributes<HTMLElement> = {};\n  if (description) {\n    descriptionProps.id = descriptionId;\n  }\n  if (errorMessage) {\n    errorMessageProps.id = errorMessageId;\n  }\n\n  return {\n    labelProps,\n    fieldProps,\n    descriptionProps,\n    errorMessageProps\n  };\n}\n"]},"metadata":{},"sourceType":"module"}