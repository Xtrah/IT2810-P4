{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useResponsiveSSRProps = useResponsiveSSRProps;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nvar _useTheme = require(\"../hooks/useTheme\");\n\nvar _NativeBaseContext = require(\"../core/NativeBaseContext\");\n\nvar _tools = require(\"../theme/tools\");\n\nfunction useResponsiveSSRProps(incomingProps) {\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      modified = _useState2[0],\n      setModified = _useState2[1];\n\n  var theme = (0, _useTheme.useTheme)();\n  var responsivePropsExists = (0, _tools.isResponsiveAnyProp)(incomingProps, theme);\n  var isSSR = (0, _NativeBaseContext.useNativeBaseConfig)('useBreakpointResolvedProps').isSSR;\n  var modifiedProps = incomingProps;\n\n  if (responsivePropsExists && isSSR && !modified) {\n    modifiedProps = (0, _extends2.default)({}, modifiedProps, {\n      key: Math.random()\n    });\n  }\n\n  (0, _react.useEffect)(function () {\n    if (responsivePropsExists && isSSR) {\n      setModified(true);\n    }\n  }, [responsivePropsExists, isSSR]);\n  return modifiedProps;\n}","map":{"version":3,"sources":["useResponsiveSSRProps.ts"],"names":["modified","setModified","theme","responsivePropsExists","isSSR","modifiedProps","key","Math"],"mappings":";;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,qBAAA;;AACA,IAAA,kBAAA,GAAA,OAAA,6BAAA;;AACA,IAAA,MAAA,GAAA,OAAA,kBAAA;;AAEO,SAAA,qBAAA,CAAA,aAAA,EAAmD;AAAA,MAAA,SAAA,GACxB,CAAA,GAAA,MAAA,CAAA,QAAA,EADwB,KACxB,CADwB;AAAA,MAAA,UAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MACjDA,QADiD,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MACvCC,WADuC,GAAA,UAAA,CAAA,CAAA,CAAA;;AAExD,MAAMC,KAAK,GAAG,CAAA,GAAA,SAAA,CAAd,QAAc,GAAd;AAEA,MAAMC,qBAAqB,GAAG,CAAA,GAAA,MAAA,CAAA,mBAAA,EAAA,aAAA,EAA9B,KAA8B,CAA9B;AACA,MAAMC,KAAK,GAAG,CAAA,GAAA,kBAAA,CAAA,mBAAA,EAAA,4BAAA,EAAd,KAAA;AAEA,MAAIC,aAAa,GAAjB,aAAA;;AACA,MAAIF,qBAAqB,IAArBA,KAAAA,IAAkC,CAAtC,QAAA,EAAiD;AAC/CE,IAAAA,aAAa,GAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,EAAA,EAAA,aAAA,EAAA;AAAuBC,MAAAA,GAAG,EAAEC,IAAI,CAA7CF,MAAyCE;AAA5B,KAAA,CAAbF;AAEF;;AAAA,GAAA,GAAA,MAAA,CAAA,SAAA,EAAU,YAAW;AACnB,QAAIF,qBAAqB,IAAzB,KAAA,EAAoC;AAClCF,MAAAA,WAAW,CAAXA,IAAW,CAAXA;AAEH;AAJD,GAAA,EAIG,CAAA,qBAAA,EAJH,KAIG,CAJH;AAMA,SAAA,aAAA;AACD","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useTheme } from '../hooks/useTheme';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\nimport { isResponsiveAnyProp } from '../theme/tools';\n\nexport function useResponsiveSSRProps(incomingProps: any) {\n  const [modified, setModified] = useState(false);\n  const theme = useTheme();\n\n  const responsivePropsExists = isResponsiveAnyProp(incomingProps, theme);\n  const isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n\n  let modifiedProps = incomingProps;\n  if (responsivePropsExists && isSSR && !modified) {\n    modifiedProps = { ...modifiedProps, key: Math.random() };\n  }\n  useEffect((): any => {\n    if (responsivePropsExists && isSSR) {\n      setModified(true);\n    }\n  }, [responsivePropsExists, isSSR]);\n\n  return modifiedProps;\n}\n"]},"metadata":{},"sourceType":"script"}