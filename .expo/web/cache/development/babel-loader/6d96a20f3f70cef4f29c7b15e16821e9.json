{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScrollView = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _styled = require(\"../../../utils/styled\");\n\nvar _useHasResponsiveProps = require(\"../../../hooks/useHasResponsiveProps\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/basic/ScrollView/ScrollView.tsx\";\n\nvar StyledScrollView = (0, _styled.makeStyledComponent)(_reactNative.ScrollView);\nvar ScrollView = (0, _react.forwardRef)(function (props, ref) {\n  var _usePropsResolution = (0, _hooks.usePropsResolution)('ScrollView', props, {}),\n      _contentContainerStyle = _usePropsResolution._contentContainerStyle,\n      contentContainerStyle = _usePropsResolution.contentContainerStyle,\n      resolvedProps = (0, _objectWithoutProperties2.default)(_usePropsResolution, [\"_contentContainerStyle\", \"contentContainerStyle\"]);\n\n  var resolved_ContentContainerStyle = (0, _hooks.useStyledSystemPropsResolver)(_contentContainerStyle || {});\n\n  if ((0, _useHasResponsiveProps.useHasResponsiveProps)(props)) {\n    return null;\n  }\n\n  return _react.default.createElement(StyledScrollView, (0, _extends2.default)({}, resolvedProps, {\n    contentContainerStyle: contentContainerStyle || resolved_ContentContainerStyle,\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }));\n});\nexports.ScrollView = ScrollView;","map":{"version":3,"sources":["ScrollView.tsx"],"names":["StyledScrollView","RNScrollView","ScrollView","_contentContainerStyle","contentContainerStyle","resolvedProps","resolved_ContentContainerStyle"],"mappings":";;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAEA,IAAA,MAAA,GAAA,OAAA,kBAAA;;AAIA,IAAA,OAAA,GAAA,OAAA,yBAAA;;AAEA,IAAA,sBAAA,GAAA,OAAA,wCAAA;;;;;AAEA,IAAMA,gBAAqB,GAAG,CAAA,GAAA,OAAA,CAAA,mBAAA,EAAoBC,YAAAA,CAAlD,UAA8B,CAA9B;AAEO,IAAMC,UAAU,GAAG,CAAA,GAAA,MAAA,CAAA,UAAA,EAAW,UAAA,KAAA,EAAA,GAAA,EAAuC;AAAA,MAAA,mBAAA,GAKtE,CAAA,GAAA,MAAA,CAAA,kBAAA,EAAA,YAAA,EAAA,KAAA,EALsE,EAKtE,CALsE;AAAA,MAExEC,sBAFwE,GAAA,mBAAA,CAAA,sBAAA;AAAA,MAGxEC,qBAHwE,GAAA,mBAAA,CAAA,qBAAA;AAAA,MAIrEC,aAJqE,GAAA,CAAA,GAAA,yBAAA,CAAA,OAAA,EAAA,mBAAA,EAAA,CAAA,wBAAA,EAAA,uBAAA,CAAA,CAAA;;AAM1E,MAAMC,8BAA8B,GAAG,CAAA,GAAA,MAAA,CAAA,4BAAA,EACrCH,sBAAsB,IADxB,EAAuC,CAAvC;;AAIA,MAAI,CAAA,GAAA,sBAAA,CAAA,qBAAA,EAAJ,KAAI,CAAJ,EAAkC;AAChC,WAAA,IAAA;AAEF;;AAAA,SACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,EAAA,EAAA,aAAA,EAAA;AAEE,IAAA,qBAAqB,EACnBC,qBAAqB,IAHzB,8BAAA;AAKE,IAAA,GAAG,EALL,GAAA;AAAA,IAAA,MAAA,EAAA,KAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EADF;AACE;AAAA,GAAA,CAAA,CADF;AAbK,CAAmB,CAAnB","sourcesContent":["import React, { forwardRef } from 'react';\nimport { ScrollView as RNScrollView } from 'react-native';\nimport {\n  usePropsResolution,\n  useStyledSystemPropsResolver,\n} from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport type { IScrollViewProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst StyledScrollView: any = makeStyledComponent(RNScrollView);\n\nexport const ScrollView = forwardRef((props: IScrollViewProps, ref: any) => {\n  const {\n    _contentContainerStyle,\n    contentContainerStyle,\n    ...resolvedProps\n  } = usePropsResolution('ScrollView', props, {});\n  const resolved_ContentContainerStyle = useStyledSystemPropsResolver(\n    _contentContainerStyle || {}\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <StyledScrollView\n      {...resolvedProps}\n      contentContainerStyle={\n        contentContainerStyle || resolved_ContentContainerStyle\n      }\n      ref={ref}\n    />\n  );\n});\n"]},"metadata":{},"sourceType":"script"}