{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _useThemeProps = require(\"../../../hooks/useThemeProps\");\n\nvar _interactions = require(\"@react-native-aria/interactions\");\n\nvar _mergeRefs = require(\"../../../utils/mergeRefs\");\n\nvar _styled = require(\"../../../utils/styled\");\n\nvar _useResolvedFontFamily = require(\"../../../hooks/useResolvedFontFamily\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _useHasResponsiveProps = require(\"../../../hooks/useHasResponsiveProps\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/primitives/Text/index.tsx\";\n\nvar StyledText = (0, _styled.makeStyledComponent)(_reactNative.Text);\n\nvar Text = function Text(_ref2, ref) {\n  var children = _ref2.children,\n      props = (0, _objectWithoutProperties2.default)(_ref2, [\"children\"]);\n\n  var _usePropsResolution = (0, _useThemeProps.usePropsResolution)('Text', props, {}, {\n    resolveResponsively: ['noOfLines', 'numberOfLines']\n  }),\n      isTruncated = _usePropsResolution.isTruncated,\n      noOfLines = _usePropsResolution.noOfLines,\n      bold = _usePropsResolution.bold,\n      italic = _usePropsResolution.italic,\n      sub = _usePropsResolution.sub,\n      highlight = _usePropsResolution.highlight,\n      underline = _usePropsResolution.underline,\n      strikeThrough = _usePropsResolution.strikeThrough,\n      propFontFamily = _usePropsResolution.fontFamily,\n      propFontWeight = _usePropsResolution.fontWeight,\n      propFontStyle = _usePropsResolution.fontStyle,\n      _hover = _usePropsResolution._hover,\n      _usePropsResolution$f = _usePropsResolution.fontSize,\n      fontSize = _usePropsResolution$f === void 0 ? 'md' : _usePropsResolution$f,\n      numberOfLines = _usePropsResolution.numberOfLines,\n      reslovedProps = (0, _objectWithoutProperties2.default)(_usePropsResolution, [\"isTruncated\", \"noOfLines\", \"bold\", \"italic\", \"sub\", \"highlight\", \"underline\", \"strikeThrough\", \"fontFamily\", \"fontWeight\", \"fontStyle\", \"_hover\", \"fontSize\", \"numberOfLines\"]);\n\n  var _ref = (0, _react.useRef)(null);\n\n  var _useHover = (0, _interactions.useHover)({}, _hover ? _ref : null),\n      isHovered = _useHover.isHovered;\n\n  var fontFamily = propFontFamily;\n  var fontStyle = italic ? 'italic' : propFontStyle;\n  var fontWeight = bold ? 'bold' : propFontWeight;\n  var resolvedFontFamily = (0, _useResolvedFontFamily.useResolvedFontFamily)({\n    fontFamily: fontFamily,\n    fontWeight: fontWeight,\n    fontStyle: fontStyle\n  });\n\n  if (resolvedFontFamily) {\n    fontFamily = resolvedFontFamily;\n  }\n\n  if ((0, _useHasResponsiveProps.useHasResponsiveProps)(props)) {\n    return null;\n  }\n\n  return _react.default.createElement(StyledText, (0, _extends2.default)({}, reslovedProps, {\n    numberOfLines: numberOfLines || noOfLines ? numberOfLines || noOfLines : isTruncated ? 1 : undefined\n  }, resolvedFontFamily, {\n    bg: highlight ? 'warning.300' : reslovedProps.bg,\n    textDecorationLine: underline && strikeThrough ? 'underline line-through' : underline ? 'underline' : strikeThrough ? 'line-through' : reslovedProps.textDecorationLine,\n    fontSize: sub ? 10 : fontSize,\n    ref: (0, _mergeRefs.mergeRefs)([ref, _ref])\n  }, isHovered && _hover, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }), children);\n};\n\nvar _default = (0, _react.memo)((0, _react.forwardRef)(Text));\n\nexports.default = _default;","map":{"version":3,"sources":["index.tsx"],"names":["StyledText","NativeText","Text","children","props","isTruncated","noOfLines","bold","italic","sub","highlight","underline","strikeThrough","propFontFamily","propFontWeight","propFontStyle","_hover","fontSize","numberOfLines","reslovedProps","resolveResponsively","_ref","isHovered","fontFamily","fontStyle","fontWeight","resolvedFontFamily"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef, useRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { ITextProps } from './types';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils/mergeRefs';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\nimport { Text as NativeText } from 'react-native';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst StyledText = makeStyledComponent(NativeText);\n\nconst Text = ({ children, ...props }: ITextProps, ref: any) => {\n  const {\n    isTruncated,\n    noOfLines,\n    bold,\n    italic,\n    sub,\n    highlight,\n    underline,\n    strikeThrough,\n    fontFamily: propFontFamily,\n    fontWeight: propFontWeight,\n    fontStyle: propFontStyle,\n    _hover,\n    fontSize = 'md',\n    numberOfLines,\n    ...reslovedProps\n  } = usePropsResolution(\n    'Text',\n    props,\n    {},\n    { resolveResponsively: ['noOfLines', 'numberOfLines'] }\n  );\n\n  const _ref = useRef(null);\n  // TODO: might have to add this condition\n  const { isHovered } = useHover({}, _hover ? _ref : null);\n  // const { isHovered } = useHover({}, _ref);\n  let fontFamily = propFontFamily;\n  const fontStyle = italic ? 'italic' : propFontStyle;\n  const fontWeight = bold ? 'bold' : propFontWeight;\n\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight,\n    fontStyle,\n  });\n\n  if (resolvedFontFamily) {\n    fontFamily = resolvedFontFamily;\n  }\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <StyledText\n      {...reslovedProps}\n      numberOfLines={\n        numberOfLines || noOfLines\n          ? numberOfLines || noOfLines\n          : isTruncated\n          ? 1\n          : undefined\n      }\n      {...resolvedFontFamily}\n      bg={highlight ? 'warning.300' : reslovedProps.bg}\n      textDecorationLine={\n        underline && strikeThrough\n          ? 'underline line-through'\n          : underline\n          ? 'underline'\n          : strikeThrough\n          ? 'line-through'\n          : reslovedProps.textDecorationLine\n      }\n      fontSize={sub ? 10 : fontSize}\n      ref={mergeRefs([ref, _ref])}\n      {...(isHovered && _hover)}\n    >\n      {children}\n    </StyledText>\n  );\n};\n\nexport default memo(forwardRef(Text));\nexport type { ITextProps };\n"]},"metadata":{},"sourceType":"script"}