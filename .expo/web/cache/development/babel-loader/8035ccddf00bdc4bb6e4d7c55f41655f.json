{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _Box = _interopRequireDefault(require(\"../../primitives/Box\"));\n\nvar _useThemeProps = require(\"../../../hooks/useThemeProps\");\n\nvar _useFormControl = require(\"./useFormControl\");\n\nvar _useHasResponsiveProps = require(\"../../../hooks/useHasResponsiveProps\");\n\nvar _utils = require(\"../../../utils\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/FormControl/FormControlHelperText.tsx\";\n\nvar FormControlHelperText = function FormControlHelperText(props, ref) {\n  var formControlContext = (0, _useFormControl.useFormControlContext)();\n  var combinedProps = (0, _utils.combineContextAndProps)(formControlContext, props);\n  var resolvedProps = (0, _useThemeProps.usePropsResolution)('FormControlHelperText', combinedProps, {\n    isDisabled: combinedProps.isDisabled,\n    isReadOnly: combinedProps.isReadOnly,\n    isInvalid: combinedProps.isInvalid\n  });\n\n  _react.default.useEffect(function () {\n    resolvedProps == null ? void 0 : resolvedProps.setHasHelpText(true);\n    return function () {\n      resolvedProps == null ? void 0 : resolvedProps.setHasHelpText(false);\n    };\n  });\n\n  if ((0, _useHasResponsiveProps.useHasResponsiveProps)(props)) {\n    return null;\n  }\n\n  return _react.default.createElement(_Box.default, (0, _extends2.default)({}, resolvedProps, {\n    nativeID: resolvedProps == null ? void 0 : resolvedProps.feedbackId,\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }));\n};\n\nvar _default = (0, _react.memo)((0, _react.forwardRef)(FormControlHelperText));\n\nexports.default = _default;","map":{"version":3,"sources":["FormControlHelperText.tsx"],"names":["FormControlHelperText","formControlContext","combinedProps","resolvedProps","isDisabled","isReadOnly","isInvalid","React"],"mappings":";;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,wBAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,gCAAA;;AACA,IAAA,eAAA,GAAA,OAAA,oBAAA;;AAEA,IAAA,sBAAA,GAAA,OAAA,wCAAA;;AACA,IAAA,MAAA,GAAA,OAAA,kBAAA;;;;;AAEA,IAAMA,qBAAqB,GAArBA,SAAAA,qBAAAA,CAAwB,KAAxBA,EAAwB,GAAxBA,EAGD;AACH,MAAMC,kBAAkB,GAAG,CAAA,GAAA,eAAA,CAA3B,qBAA2B,GAA3B;AACA,MAAMC,aAAa,GAAG,CAAA,GAAA,MAAA,CAAA,sBAAA,EAAA,kBAAA,EAAtB,KAAsB,CAAtB;AACA,MAAMC,aAAa,GAAG,CAAA,GAAA,cAAA,CAAA,kBAAA,EAAA,uBAAA,EAAA,aAAA,EAGpB;AACEC,IAAAA,UAAU,EAAEF,aAAa,CAD3B,UAAA;AAEEG,IAAAA,UAAU,EAAEH,aAAa,CAF3B,UAAA;AAGEI,IAAAA,SAAS,EAAEJ,aAAa,CAN5B;AAGE,GAHoB,CAAtB;;AAWAK,EAAAA,MAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAgB,YAAM;AACpBJ,IAAAA,aAAa,IAAbA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,aAAa,CAAbA,cAAAA,CAAAA,IAAAA,CAAAA;AACA,WAAO,YAAM;AACXA,MAAAA,aAAa,IAAbA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,aAAa,CAAbA,cAAAA,CAAAA,KAAAA,CAAAA;AADF,KAAA;AAFFI,GAAAA;;AAOA,MAAI,CAAA,GAAA,sBAAA,CAAA,qBAAA,EAAJ,KAAI,CAAJ,EAAkC;AAChC,WAAA,IAAA;AAGF;;AAAA,SACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,IAAA,CAAD,OAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,EAAA,EAAA,aAAA,EAAA;AAAwB,IAAA,QAAQ,EAAEJ,aAAF,IAAA,IAAEA,GAAF,KAAA,CAAEA,GAAAA,aAAa,CAA/C,UAAA;AAA6D,IAAA,GAAG,EAAhE,GAAA;AAAA,IAAA,MAAA,EAAA,KAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EADF;AACE;AAAA,GAAA,CAAA,CADF;AA5BF,CAAA;;eAiCe,CAAA,GAAA,MAAA,CAAA,IAAA,EAAK,CAAA,GAAA,MAAA,CAAA,UAAA,EAAL,qBAAK,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFormControlContext } from './useFormControl';\nimport type { IFormControlHelperTextProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlHelperText = (\n  props: IFormControlHelperTextProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const resolvedProps = usePropsResolution(\n    'FormControlHelperText',\n    combinedProps,\n    {\n      isDisabled: combinedProps.isDisabled,\n      isReadOnly: combinedProps.isReadOnly,\n      isInvalid: combinedProps.isInvalid,\n      // isRequired: combinedProps.isRequired,\n    }\n  );\n\n  React.useEffect(() => {\n    resolvedProps?.setHasHelpText(true);\n    return () => {\n      resolvedProps?.setHasHelpText(false);\n    };\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box {...resolvedProps} nativeID={resolvedProps?.feedbackId} ref={ref} />\n  );\n};\n\nexport default memo(forwardRef(FormControlHelperText));\n"]},"metadata":{},"sourceType":"script"}