{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extendTheme = extendTheme;\n\nvar _theme = require(\"./../theme\");\n\nvar _lodash = _interopRequireDefault(require(\"lodash.mergewith\"));\n\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n\nfunction extendTheme(overrides) {\n  function customizer(source, override) {\n    if (isFunction(source)) {\n      return function () {\n        var sourceValue = source.apply(void 0, arguments);\n        var overrideValue = isFunction(override) ? override.apply(void 0, arguments) : override;\n        return (0, _lodash.default)({}, sourceValue, overrideValue, customizer);\n      };\n    }\n\n    return undefined;\n  }\n\n  for (var _len = arguments.length, restOverrides = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    restOverrides[_key - 1] = arguments[_key];\n  }\n\n  var finalOverrides = [overrides].concat(restOverrides).reduce(function (prevValue, currentValue) {\n    return (0, _lodash.default)({}, prevValue, currentValue, customizer);\n  }, _theme.theme);\n  return finalOverrides;\n}","map":{"version":3,"sources":["extendTheme.tsx"],"names":["restOverrides","isFunction","sourceValue","source","overrideValue","override","finalOverrides","defaultTheme"],"mappings":";;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,cAAA;;AACA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;AAEA,SAAA,UAAA,CAAA,KAAA,EAAyC;AACvC,SAAO,OAAA,KAAA,KAAP,UAAA;AAKK;;AAAA,SAAA,WAAA,CAAA,SAAA,EAGL;AACA,WAAA,UAAA,CAAA,MAAA,EAAA,QAAA,EAAgD;AAC9C,QAAIC,UAAU,CAAd,MAAc,CAAd,EAAwB;AACtB,aAAO,YAAoB;AACzB,YAAMC,WAAW,GAAGC,MAAM,CAANA,KAAAA,CAAAA,KAAAA,CAAAA,EAApB,SAAoBA,CAApB;AACA,YAAMC,aAAa,GAAGH,UAAU,CAAVA,QAAU,CAAVA,GAClBI,QAAQ,CAARA,KAAAA,CAAAA,KAAAA,CAAAA,EADkBJ,SAClBI,CADkBJ,GAAtB,QAAA;AAGA,eAAO,CAAA,GAAA,OAAA,CAAA,OAAA,EAAA,EAAA,EAAA,WAAA,EAAA,aAAA,EAAP,UAAO,CAAP;AALF,OAAA;AAQF;;AAAA,WAAA,SAAA;AAXF;;AAAA,OAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EADGD,aACH,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AADGA,IAAAA,aACH,CAAA,IAAA,GAAA,CAAA,CADGA,GACH,SAAA,CAAA,IAAA,CADGA;AAeH;;AAAA,MAAMM,cAAc,GAAG,CAAA,SAAA,EAAA,MAAA,CAAA,aAAA,EAAA,MAAA,CACrB,UAAA,SAAA,EAAA,YAAA,EAA6B;AAC3B,WAAO,CAAA,GAAA,OAAA,CAAA,OAAA,EAAA,EAAA,EAAA,SAAA,EAAA,YAAA,EAAP,UAAO,CAAP;AAFmB,GAAA,EAIrBC,MAAAA,CAJF,KAAuB,CAAvB;AAOA,SAAA,cAAA;AACD","sourcesContent":["import { theme as defaultTheme, Theme } from './../theme';\nimport mergeWith from 'lodash.mergewith';\n\nfunction isFunction(value: any): boolean {\n  return typeof value === 'function';\n}\n\ntype ThemeUtil = Theme | (Record<string, any> & {});\n\nexport function extendTheme<T extends ThemeUtil>(\n  overrides: T,\n  ...restOverrides: T[]\n) {\n  function customizer(source: any, override: any) {\n    if (isFunction(source)) {\n      return (...args: any[]) => {\n        const sourceValue = source(...args);\n        const overrideValue = isFunction(override)\n          ? override(...args)\n          : override;\n        return mergeWith({}, sourceValue, overrideValue, customizer);\n      };\n    }\n    return undefined;\n  }\n\n  const finalOverrides = [overrides, ...restOverrides].reduce(\n    (prevValue, currentValue) => {\n      return mergeWith({}, prevValue, currentValue, customizer);\n    },\n    defaultTheme\n  );\n\n  return finalOverrides as T & Theme;\n}\n"]},"metadata":{},"sourceType":"script"}