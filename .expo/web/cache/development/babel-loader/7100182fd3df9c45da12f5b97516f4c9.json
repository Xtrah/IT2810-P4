{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _useThemeProps = require(\"../../../hooks/useThemeProps\");\n\nvar _theme = require(\"../../../theme\");\n\nvar _useHasResponsiveProps = require(\"../../../hooks/useHasResponsiveProps\");\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/primitives/Spinner/index.tsx\";\n\nvar Spinner = function Spinner(props, ref) {\n  var _usePropsResolution = (0, _useThemeProps.usePropsResolution)('Spinner', props),\n      color = _usePropsResolution.color,\n      size = _usePropsResolution.size,\n      resolvedProps = (0, _objectWithoutProperties2.default)(_usePropsResolution, [\"color\", \"size\"]);\n\n  var resolvedColor = (0, _theme.getColor)(color, (0, _hooks.useTheme)().colors, (0, _hooks.useTheme)());\n\n  if ((0, _useHasResponsiveProps.useHasResponsiveProps)(props)) {\n    return null;\n  }\n\n  return _react.default.createElement(_reactNative.ActivityIndicator, (0, _extends2.default)({\n    accessible: true,\n    accessibilityLabel: \"loading\"\n  }, resolvedProps, {\n    color: resolvedColor,\n    ref: ref,\n    size: size,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }));\n};\n\nvar _default = (0, _react.memo)((0, _react.forwardRef)(Spinner));\n\nexports.default = _default;","map":{"version":3,"sources":["index.tsx"],"names":["Spinner","color","size","resolvedProps","resolvedColor"],"mappings":";;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAEA,IAAA,cAAA,GAAA,OAAA,gCAAA;;AACA,IAAA,MAAA,GAAA,OAAA,kBAAA;;AAEA,IAAA,sBAAA,GAAA,OAAA,wCAAA;;AACA,IAAA,MAAA,GAAA,OAAA,kBAAA;;;;;AAEA,IAAMA,OAAO,GAAPA,SAAAA,OAAAA,CAAU,KAAVA,EAAU,GAAVA,EAA8C;AAAA,MAAA,mBAAA,GACR,CAAA,GAAA,cAAA,CAAA,kBAAA,EAAA,SAAA,EADQ,KACR,CADQ;AAAA,MAC1CC,KAD0C,GAAA,mBAAA,CAAA,KAAA;AAAA,MACnCC,IADmC,GAAA,mBAAA,CAAA,IAAA;AAAA,MAC1BC,aAD0B,GAAA,CAAA,GAAA,yBAAA,CAAA,OAAA,EAAA,mBAAA,EAAA,CAAA,OAAA,EAAA,MAAA,CAAA,CAAA;;AAKlD,MAAMC,aAAa,GAAG,CAAA,GAAA,MAAA,CAAA,QAAA,EAAA,KAAA,EAAgB,CAAA,GAAA,MAAA,CAAA,QAAA,IAAhB,MAAA,EAAmC,CAAA,GAAA,MAAA,CAAzD,QAAyD,GAAnC,CAAtB;;AAEA,MAAI,CAAA,GAAA,sBAAA,CAAA,qBAAA,EAAJ,KAAI,CAAJ,EAAkC;AAChC,WAAA,IAAA;AAEF;;AAAA,SACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAD,iBAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA;AACE,IAAA,UAAU,EADZ,IAAA;AAEE,IAAA,kBAAkB,EAFpB;AAAA,GAAA,EAAA,aAAA,EAAA;AAIE,IAAA,KAAK,EAJP,aAAA;AAKE,IAAA,GAAG,EALL,GAAA;AAME,IAAA,IAAI,EANN,IAAA;AAAA,IAAA,MAAA,EAAA,KAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EADF;AACE;AAAA,GAAA,CAAA,CADF;AAVF,CAAA;;eAsBe,CAAA,GAAA,MAAA,CAAA,IAAA,EAAK,CAAA,GAAA,MAAA,CAAA,UAAA,EAAL,OAAK,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ActivityIndicator } from 'react-native';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { getColor } from '../../../theme';\nimport type { ISpinnerProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useTheme } from '../../../hooks';\n\nconst Spinner = (props: ISpinnerProps, ref: any) => {\n  const { color, size, ...resolvedProps } = usePropsResolution(\n    'Spinner',\n    props\n  );\n  const resolvedColor = getColor(color, useTheme().colors, useTheme());\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <ActivityIndicator\n      accessible\n      accessibilityLabel=\"loading\"\n      {...resolvedProps}\n      color={resolvedColor}\n      ref={ref}\n      size={size}\n    />\n  );\n};\n\nexport default memo(forwardRef(Spinner));\nexport type { ISpinnerProps };\n"]},"metadata":{},"sourceType":"script"}