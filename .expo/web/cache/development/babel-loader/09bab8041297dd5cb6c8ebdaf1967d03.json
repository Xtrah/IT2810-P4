{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _useThemeProps = require(\"../../../hooks/useThemeProps\");\n\nvar _Pressable = require(\"../Pressable\");\n\nvar _Box = _interopRequireDefault(require(\"../Box\"));\n\nvar _Context = require(\"./Context\");\n\nvar _useHasResponsiveProps = require(\"../../../hooks/useHasResponsiveProps\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/primitives/Slider/SliderTrack.tsx\";\n\nvar SliderTrack = function SliderTrack(_ref, ref) {\n  var children = _ref.children,\n      props = (0, _objectWithoutProperties2.default)(_ref, [\"children\"]);\n\n  var _React$useContext = _react.default.useContext(_Context.SliderContext),\n      orientation = _React$useContext.orientation,\n      trackProps = _React$useContext.trackProps,\n      onTrackLayout = _React$useContext.onTrackLayout,\n      colorScheme = _React$useContext.colorScheme,\n      sliderSize = _React$useContext.sliderSize,\n      isReadOnly = _React$useContext.isReadOnly,\n      isDisabled = _React$useContext.isDisabled;\n\n  var resolvedProps = (0, _useThemeProps.usePropsResolution)('SliderTrack', (0, _extends2.default)({\n    size: sliderSize,\n    colorScheme: colorScheme\n  }, props), {\n    isReadOnly: isReadOnly,\n    isDisabled: isDisabled\n  });\n  var isVertical = orientation === 'vertical';\n\n  var trackStyle = _react.default.useMemo(function () {\n    return {\n      height: isVertical ? '100%' : resolvedProps.size,\n      width: !isVertical ? '100%' : resolvedProps.size\n    };\n  }, [isVertical, resolvedProps.size]);\n\n  if ((0, _useHasResponsiveProps.useHasResponsiveProps)(props)) {\n    return null;\n  }\n\n  return _react.default.createElement(_Pressable.Pressable, (0, _extends2.default)({\n    onLayout: onTrackLayout,\n    ref: ref\n  }, trackProps, trackStyle, {\n    paddingY: !isVertical ? '12px' : undefined,\n    paddingX: isVertical ? '12px' : undefined,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }), _react.default.createElement(_Box.default, (0, _extends2.default)({}, resolvedProps, {\n    style: trackStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), children));\n};\n\nvar _default = _react.default.forwardRef(SliderTrack);\n\nexports.default = _default;","map":{"version":3,"sources":["SliderTrack.tsx"],"names":["SliderTrack","children","props","orientation","trackProps","onTrackLayout","colorScheme","sliderSize","isReadOnly","isDisabled","React","SliderContext","resolvedProps","size","isVertical","trackStyle","height","width"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Pressable } from '../Pressable';\nimport Box from '../Box';\nimport { SliderContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ISliderTrackProps } from './types';\n\nconst SliderTrack = ({ children, ...props }: ISliderTrackProps, ref?: any) => {\n  const {\n    orientation,\n    trackProps,\n    onTrackLayout,\n    colorScheme,\n    sliderSize,\n    isReadOnly,\n    isDisabled,\n  } = React.useContext(SliderContext);\n\n  const resolvedProps = usePropsResolution(\n    'SliderTrack',\n    {\n      size: sliderSize,\n      colorScheme,\n      ...props,\n    },\n    { isReadOnly, isDisabled }\n  );\n\n  const isVertical = orientation === 'vertical';\n\n  const trackStyle = React.useMemo(\n    () => ({\n      height: isVertical ? '100%' : resolvedProps.size,\n      width: !isVertical ? '100%' : resolvedProps.size,\n    }),\n    [isVertical, resolvedProps.size]\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Pressable\n      onLayout={onTrackLayout}\n      ref={ref}\n      {...trackProps}\n      {...trackStyle}\n      paddingY={!isVertical ? '12px' : undefined}\n      paddingX={isVertical ? '12px' : undefined}\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <Box {...resolvedProps} style={trackStyle}>\n        {children}\n      </Box>\n    </Pressable>\n  );\n};\n\nexport default React.forwardRef(SliderTrack);\n"]},"metadata":{},"sourceType":"script"}