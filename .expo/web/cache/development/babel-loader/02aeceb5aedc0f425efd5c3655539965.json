{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _Box = _interopRequireDefault(require(\"../../primitives/Box\"));\n\nvar _Text = _interopRequireDefault(require(\"../../primitives/Text\"));\n\nvar _useFormControl = require(\"./useFormControl\");\n\nvar _useThemeProps = require(\"../../../hooks/useThemeProps\");\n\nvar _utils = require(\"../../../utils\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/FormControl/FormControlLabel.tsx\";\n\nvar FormControlLabel = function FormControlLabel(_ref2, ref) {\n  var children = _ref2.children,\n      props = (0, _objectWithoutProperties2.default)(_ref2, [\"children\"]);\n  var formControlContext = (0, _useFormControl.useFormControlContext)();\n  var combinedProps = (0, _utils.combineContextAndProps)(formControlContext, props);\n\n  var _ref = _react.default.useRef(null);\n\n  var _usePropsResolution = (0, _useThemeProps.usePropsResolution)('FormControlLabel', combinedProps, {\n    isDisabled: combinedProps.isDisabled,\n    isReadOnly: combinedProps.isReadOnly,\n    isInvalid: combinedProps.isInvalid\n  }),\n      astrickColor = _usePropsResolution.astrickColor,\n      reslovedProps = (0, _objectWithoutProperties2.default)(_usePropsResolution, [\"astrickColor\"]);\n\n  var requiredAsterisk = function requiredAsterisk() {\n    return _react.default.createElement(_Text.default, {\n      _web: {\n        accessibilityHidden: true,\n        accessibilityRole: 'presentation'\n      },\n      color: astrickColor,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 5\n      }\n    }, \"*\");\n  };\n\n  var mergedRef = (0, _utils.mergeRefs)([_ref, ref]);\n\n  _react.default.useEffect(function () {\n    if (_ref.current) {\n      if (props.htmlFor) {\n        _ref.current.htmlFor = props.htmlFor;\n      } else if (reslovedProps != null && reslovedProps.nativeID) {\n        _ref.current.htmlFor = reslovedProps.nativeID;\n      }\n    }\n  }, [reslovedProps == null ? void 0 : reslovedProps.nativeID, props.htmlFor]);\n\n  return _react.default.createElement(_Box.default, (0, _extends2.default)({\n    flexDirection: \"row\",\n    justifyContent: \"flex-start\",\n    _web: {\n      accessibilityRole: 'label'\n    }\n  }, reslovedProps, {\n    nativeID: reslovedProps == null ? void 0 : reslovedProps.labelId,\n    ref: mergedRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }), children, (reslovedProps == null ? void 0 : reslovedProps.isRequired) && requiredAsterisk());\n};\n\nvar _default = (0, _react.memo)((0, _react.forwardRef)(FormControlLabel));\n\nexports.default = _default;","map":{"version":3,"sources":["FormControlLabel.tsx"],"names":["FormControlLabel","children","props","formControlContext","combinedProps","_ref","React","astrickColor","reslovedProps","isDisabled","isReadOnly","isInvalid","requiredAsterisk","accessibilityHidden","accessibilityRole","mergedRef"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport Text from '../../primitives/Text';\nimport { useFormControlContext } from './useFormControl';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IFormControlLabelProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlLabel = (\n  { children, ...props }: IFormControlLabelProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const _ref = React.useRef<HTMLLabelElement>(null);\n  const { astrickColor, ...reslovedProps } = usePropsResolution(\n    'FormControlLabel',\n    combinedProps,\n    {\n      isDisabled: combinedProps.isDisabled,\n      isReadOnly: combinedProps.isReadOnly,\n      isInvalid: combinedProps.isInvalid,\n      // isRequired: combinedProps.isRequired,\n    }\n  );\n\n  const requiredAsterisk = () => (\n    <Text\n      _web={{\n        accessibilityHidden: true,\n        //@ts-ignore\n        accessibilityRole: 'presentation',\n      }}\n      color={astrickColor}\n    >\n      *\n    </Text>\n  );\n  const mergedRef = mergeRefs([_ref, ref]);\n  React.useEffect(() => {\n    if (_ref.current) {\n      // RN web doesn't support htmlFor for Label element yet\n      if (props.htmlFor) {\n        _ref.current.htmlFor = props.htmlFor;\n      } else if (reslovedProps?.nativeID) {\n        _ref.current.htmlFor = reslovedProps.nativeID;\n      }\n    }\n  }, [reslovedProps?.nativeID, props.htmlFor]);\n\n  return (\n    <Box\n      flexDirection=\"row\"\n      justifyContent=\"flex-start\"\n      _web={{\n        //@ts-ignore\n        accessibilityRole: 'label',\n      }}\n      {...reslovedProps}\n      nativeID={reslovedProps?.labelId}\n      ref={mergedRef}\n    >\n      {children}\n      {reslovedProps?.isRequired && requiredAsterisk()}\n    </Box>\n  );\n};\nexport default memo(forwardRef(FormControlLabel));\n"]},"metadata":{},"sourceType":"script"}