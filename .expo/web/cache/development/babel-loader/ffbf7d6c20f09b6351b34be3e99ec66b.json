{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _utils = require(\"../../../utils\");\n\nvar _Box = _interopRequireDefault(require(\"../../primitives/Box\"));\n\nvar _useHasResponsiveProps = require(\"../../../hooks/useHasResponsiveProps\");\n\nvar _useToken = require(\"../../../hooks/useToken\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/Skeleton/Skeleton.tsx\";\n\nvar Skeleton = function Skeleton(props, ref) {\n  var isDomUsable = (0, _utils.canUseDom)();\n\n  var _usePropsResolution = (0, _hooks.usePropsResolution)('Skeleton', props),\n      children = _usePropsResolution.children,\n      startColor = _usePropsResolution.startColor,\n      style = _usePropsResolution.style,\n      endColor = _usePropsResolution.endColor,\n      resolvedProps = (0, _objectWithoutProperties2.default)(_usePropsResolution, [\"children\", \"startColor\", \"style\", \"endColor\"]);\n\n  var blinkAnim = _react.default.useRef(new _reactNative.Animated.Value(0)).current;\n\n  var tokenisedRadius = (0, _useToken.useToken)('radii', resolvedProps.borderRadius);\n  var tokenisedStartColor = (0, _useToken.useToken)('colors', startColor);\n\n  _react.default.useEffect(function () {\n    if (isDomUsable) {\n      var blink = _reactNative.Animated.sequence([_reactNative.Animated.timing(blinkAnim, {\n        toValue: 1,\n        duration: resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n        useNativeDriver: _reactNative.Platform.OS !== 'web'\n      }), _reactNative.Animated.timing(blinkAnim, {\n        toValue: 0,\n        duration: resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n        useNativeDriver: _reactNative.Platform.OS !== 'web'\n      })]);\n\n      _reactNative.Animated.loop(blink).start();\n    }\n  }, [blinkAnim, isDomUsable, resolvedProps]);\n\n  var skeletonStyle = {\n    skeleton: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      height: '100%',\n      width: '100%',\n      borderRadius: tokenisedRadius,\n      backgroundColor: tokenisedStartColor,\n      opacity: blinkAnim\n    }\n  };\n\n  if ((0, _useHasResponsiveProps.useHasResponsiveProps)(props)) {\n    return null;\n  }\n\n  return resolvedProps.isLoaded ? children : _react.default.createElement(_Box.default, (0, _extends2.default)({\n    style: [style],\n    borderRadius: tokenisedRadius,\n    bg: endColor\n  }, resolvedProps, {\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }), _react.default.createElement(_reactNative.Animated.View, {\n    style: skeletonStyle.skeleton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }), children ? _react.default.createElement(_reactNative.View, {\n    style: {\n      opacity: 0\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 19\n    }\n  }, children) : null);\n};\n\nvar _default = (0, _react.memo)((0, _react.forwardRef)(Skeleton));\n\nexports.default = _default;","map":{"version":3,"sources":["Skeleton.tsx"],"names":["Skeleton","isDomUsable","children","startColor","style","endColor","resolvedProps","blinkAnim","React","Animated","tokenisedRadius","tokenisedStartColor","blink","toValue","duration","useNativeDriver","Platform","skeletonStyle","skeleton","position","top","bottom","height","width","borderRadius","backgroundColor","opacity"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Animated, Platform, View } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport { canUseDom } from '../../../utils';\nimport Box from '../../primitives/Box';\nimport type { ISkeletonProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useToken } from '../../../hooks/useToken';\n\nconst Skeleton = (props: ISkeletonProps, ref: any) => {\n  const isDomUsable = canUseDom();\n  const {\n    children,\n    startColor,\n    style,\n    endColor,\n    ...resolvedProps\n  } = usePropsResolution('Skeleton', props);\n  // Setting blink Animation\n  const blinkAnim = React.useRef(new Animated.Value(0)).current;\n  const tokenisedRadius = useToken('radii', resolvedProps.borderRadius);\n  const tokenisedStartColor = useToken('colors', startColor);\n\n  // Generating blink animation in a sequence\n  React.useEffect(() => {\n    //Check if window is loaded\n    if (isDomUsable) {\n      const blink = Animated.sequence([\n        Animated.timing(blinkAnim, {\n          toValue: 1,\n          duration:\n            resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n        Animated.timing(blinkAnim, {\n          toValue: 0,\n          duration:\n            resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n      ]);\n      Animated.loop(blink).start();\n    }\n  }, [blinkAnim, isDomUsable, resolvedProps]);\n\n  const skeletonStyle: any = {\n    skeleton: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      height: '100%',\n      width: '100%',\n      borderRadius: tokenisedRadius,\n      backgroundColor: tokenisedStartColor,\n      opacity: blinkAnim, // Bind opacity to animated value\n    },\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return resolvedProps.isLoaded ? (\n    children\n  ) : (\n    <Box\n      style={[style]}\n      borderRadius={tokenisedRadius}\n      bg={endColor}\n      {...resolvedProps}\n      ref={ref}\n    >\n      <Animated.View style={skeletonStyle.skeleton} />\n      {/* Rendering children with 0 opacity (takes height of children incase children are present) */}\n      {children ? <View style={{ opacity: 0 }}>{children}</View> : null}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Skeleton));\n"]},"metadata":{},"sourceType":"script"}