{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _Stack = require(\"../../primitives/Stack\");\n\nvar _Box = _interopRequireDefault(require(\"../../primitives/Box\"));\n\nvar _Skeleton = _interopRequireDefault(require(\"./Skeleton\"));\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/Skeleton/SkeletonText.tsx\";\n\nvar SkeletonText = function SkeletonText(_ref, ref) {\n  var children = _ref.children,\n      props = (0, _objectWithoutProperties2.default)(_ref, [\"children\"]);\n\n  var _usePropsResolution = (0, _hooks.usePropsResolution)('SkeletonText', props),\n      space = _usePropsResolution.space,\n      lineHeight = _usePropsResolution.lineHeight,\n      startColor = _usePropsResolution.startColor,\n      endColor = _usePropsResolution.endColor,\n      _stack = _usePropsResolution._stack,\n      resolvedProps = (0, _objectWithoutProperties2.default)(_usePropsResolution, [\"space\", \"lineHeight\", \"startColor\", \"endColor\", \"_stack\"]);\n\n  var computedChildren = [];\n\n  for (var i = 0; i < resolvedProps.noOfLines; i++) {\n    if (i === resolvedProps.noOfLines - 1 && resolvedProps.noOfLines !== 1) {\n      computedChildren.push(_react.default.createElement(_Skeleton.default, {\n        borderRadius: resolvedProps.borderRadius ? resolvedProps.borderRadius : 3,\n        endColor: endColor,\n        startColor: startColor,\n        h: lineHeight,\n        w: \"75%\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }\n      }));\n    } else computedChildren.push(_react.default.createElement(_Skeleton.default, {\n      borderRadius: resolvedProps.borderRadius ? resolvedProps.borderRadius : 3,\n      endColor: endColor,\n      startColor: startColor,\n      h: lineHeight,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return resolvedProps.isLoaded ? children : _react.default.createElement(_Box.default, (0, _extends2.default)({\n    borderRadius: resolvedProps.borderRadius ? resolvedProps.borderRadius : 3,\n    bg: 'transparent'\n  }, resolvedProps, {\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }), _react.default.createElement(_Stack.VStack, (0, _extends2.default)({\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n    justifyContent: space === undefined ? 'space-between' : 'flex-start',\n    space: space\n  }, _stack, {\n    overflow: \"hidden\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), computedChildren), children ? _react.default.createElement(_Box.default, {\n    opacity: 0,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 19\n    }\n  }, children) : null);\n};\n\nvar _default = (0, _react.memo)((0, _react.forwardRef)(SkeletonText));\n\nexports.default = _default;","map":{"version":3,"sources":["SkeletonText.tsx"],"names":["SkeletonText","children","props","space","lineHeight","startColor","endColor","_stack","resolvedProps","computedChildren","i"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from '../../../hooks';\nimport { VStack } from '../../primitives/Stack';\nimport Box, { IBoxProps } from '../../primitives/Box';\nimport Skeleton from './Skeleton';\nimport type { ISkeletonTextProps } from './types';\n\nconst SkeletonText = (\n  //@ts-ignore\n  { children, ...props }: IBoxProps & ISkeletonTextProps,\n  ref: any\n) => {\n  // const { children, ...props } = allProps;\n  const {\n    space,\n    lineHeight,\n    startColor,\n    endColor,\n    _stack,\n    ...resolvedProps\n  } = usePropsResolution('SkeletonText', props);\n\n  const computedChildren = [];\n  //generating an array of skeleton components (same length as noOfLines)\n  for (let i = 0; i < resolvedProps.noOfLines; i++) {\n    //check for last line (to change the width of last line)\n    if (i === resolvedProps.noOfLines - 1 && resolvedProps.noOfLines !== 1) {\n      computedChildren.push(\n        //Using Skeleton component with required props\n        <Skeleton\n          borderRadius={\n            resolvedProps.borderRadius ? resolvedProps.borderRadius : 3\n          }\n          endColor={endColor}\n          startColor={startColor}\n          h={lineHeight}\n          w=\"75%\"\n        />\n      );\n    } else\n      computedChildren.push(\n        <Skeleton\n          borderRadius={\n            resolvedProps.borderRadius ? resolvedProps.borderRadius : 3\n          }\n          endColor={endColor}\n          startColor={startColor}\n          h={lineHeight}\n        />\n      );\n  }\n  return resolvedProps.isLoaded ? (\n    children\n  ) : (\n    <Box\n      borderRadius={resolvedProps.borderRadius ? resolvedProps.borderRadius : 3}\n      bg={'transparent'}\n      {...resolvedProps}\n      ref={ref}\n    >\n      {/* populating computed children with given space */}\n      <VStack\n        top={0}\n        left={0}\n        right={0}\n        bottom={0}\n        position=\"absolute\"\n        justifyContent={space === undefined ? 'space-between' : 'flex-start'}\n        space={space}\n        // spreading props specific for VStack\n        {..._stack}\n        overflow=\"hidden\"\n      >\n        {computedChildren}\n      </VStack>\n      {children ? <Box opacity={0}>{children}</Box> : null}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(SkeletonText));\n"]},"metadata":{},"sourceType":"script"}